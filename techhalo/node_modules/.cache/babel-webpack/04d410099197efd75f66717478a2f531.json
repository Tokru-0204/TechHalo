{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"payPalButtonContainer\"];\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n  }\n  registerScript(url, globalVar, onReady) {\n    const existingGlobalVar = window[globalVar];\n    if (existingGlobalVar) {\n      // global variable is present = script was already loaded\n      this.zone.run(() => {\n        onReady(existingGlobalVar);\n      });\n      return;\n    }\n    // prepare script elem\n    const scriptElem = document.createElement('script');\n    scriptElem.id = this.getElemId(globalVar);\n    scriptElem.innerHTML = '';\n    scriptElem.onload = () => {\n      this.zone.run(() => {\n        onReady(window[globalVar]);\n      });\n    };\n    scriptElem.src = url;\n    scriptElem.async = true;\n    scriptElem.defer = true;\n    // add script to header\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n  cleanup(globalVar) {\n    // remove script from DOM\n    const scriptElem = document.getElementById(this.getElemId(globalVar));\n    if (scriptElem) {\n      scriptElem.remove();\n    }\n  }\n  getElemId(globalVar) {\n    return `ngx-paypal-script-elem-${globalVar}`;\n  }\n}\n/** @nocollapse */ /** @nocollapse */\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */ /** @nocollapse */\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass PayPalScriptService {\n  constructor(scriptService) {\n    this.scriptService = scriptService;\n    this.paypalWindowName = 'paypal';\n  }\n  registerPayPalScript(config, onReady) {\n    this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n  }\n  destroyPayPalScript() {\n    this.scriptService.cleanup(this.paypalWindowName);\n  }\n  getUrlForConfig(config) {\n    const params = [{\n      name: 'client-id',\n      value: config.clientId\n    }];\n    if (config.currency) {\n      params.push({\n        name: 'currency',\n        value: config.currency\n      });\n    }\n    if (config.commit) {\n      params.push({\n        name: 'commit',\n        value: config.commit\n      });\n    }\n    if (config.vault) {\n      params.push({\n        name: 'vault',\n        value: config.vault\n      });\n    }\n    if (config.intent) {\n      params.push({\n        name: 'intent',\n        value: config.intent\n      });\n    }\n    if (config.extraParams) {\n      params.push(...config.extraParams);\n    }\n    return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n  }\n  getQueryString(queryParams) {\n    let queryString = '';\n    for (let i = 0; i < queryParams.length; i++) {\n      const queryParam = queryParams[i];\n      if (i === 0) {\n        queryString += '?';\n      } else {\n        queryString += '&';\n      }\n      queryString += `${queryParam.name}=${queryParam.value}`;\n    }\n    return queryString;\n  }\n}\n/** @nocollapse */ /** @nocollapse */\nPayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n  return new (t || PayPalScriptService)(i0.ɵɵinject(ScriptService));\n};\n/** @nocollapse */ /** @nocollapse */\nPayPalScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PayPalScriptService,\n  factory: PayPalScriptService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PayPalScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }];\n  }, null);\n})();\nclass NgxPaypalComponent {\n  constructor(paypalScriptService, cdr, ngZone) {\n    this.paypalScriptService = paypalScriptService;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\n    this.registerScript = true;\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\n    this.scriptLoaded = new EventEmitter();\n    this.ngUnsubscribe = new Subject();\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\n    this.initializePayPal = true;\n  }\n  set payPalButtonContainer(content) {\n    this.payPalButtonContainerElem = content;\n  }\n  ngOnChanges(changes) {\n    if (!this.payPalButtonContainerId) {\n      this.payPalButtonContainerId = this.generateElementId();\n    }\n    // first time config setup\n    const config = this.config;\n    if (changes.config.isFirstChange()) {\n      if (config && this.registerScript) {\n        this.initPayPalScript(config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      }\n    }\n    // changes to config\n    if (!changes.config.isFirstChange()) {\n      this.reinitialize(config);\n    }\n  }\n  ngOnDestroy() {\n    this.paypalScriptService.destroyPayPalScript();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n  ngAfterViewInit() {\n    this.doPayPalCheck();\n  }\n  customInit(payPal) {\n    this.payPal = payPal;\n    this.doPayPalCheck();\n  }\n  reinitialize(config) {\n    this.config = config;\n    this.payPal = undefined;\n    this.paypalScriptService.destroyPayPalScript();\n    this.payPalButtonContainerId = this.generateElementId();\n    this.initializePayPal = true;\n    if (this.payPalButtonContainerElem) {\n      while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n        this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n      }\n    }\n    this.cdr.detectChanges();\n    if (this.config) {\n      if (!this.payPal) {\n        this.initPayPalScript(this.config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      } else {\n        this.doPayPalCheck();\n      }\n    }\n  }\n  doPayPalCheck() {\n    if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n      // make sure that id is also set\n      if (this.payPalButtonContainerElem.nativeElement.id) {\n        this.initializePayPal = false;\n        this.initPayPal(this.config, this.payPal);\n      }\n    }\n  }\n  initPayPalScript(config, initPayPal) {\n    this.paypalScriptService.registerPayPalScript({\n      clientId: config.clientId,\n      commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n      currency: config.currency,\n      vault: config.vault,\n      intent: config.intent,\n      extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n    }, paypal => {\n      this.scriptLoaded.next(paypal);\n      initPayPal(paypal);\n    });\n  }\n  generateElementId() {\n    return `ngx-captcha-id-${new Date().valueOf()}`;\n  }\n  initPayPal(config, paypal) {\n    // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n    this.ngZone.runOutsideAngular(() => {\n      // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n      const createOrder = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createOrderOnClient && config.createOrderOnServer) {\n            throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n          }\n          if (!config.createOrderOnClient && !config.createOrderOnServer) {\n            throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n          }\n          if (config.createOrderOnClient) {\n            return actions.order.create(config.createOrderOnClient(data));\n          }\n          if (config.createOrderOnServer) {\n            return config.createOrderOnServer(data);\n          }\n          throw Error(`Invalid state for 'createOrder'.`);\n        });\n      };\n      const createSubscription = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createSubscriptionOnClient) {\n            return actions.subscription.create(config.createSubscriptionOnClient(data));\n          }\n        });\n      };\n      const onShippingChange = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.onShippingChange) {\n            return config.onShippingChange(data, actions);\n          }\n        });\n      };\n      const buttonsConfig = {\n        style: config.style,\n        onApprove: (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onApprove) {\n              config.onApprove(data, actions);\n            }\n            // capture on server\n            if (config.authorizeOnServer) {\n              return config.authorizeOnServer(data, actions);\n            }\n            // capture on client\n            const onClientAuthorization = config.onClientAuthorization;\n            if (onClientAuthorization) {\n              actions.order.capture().then(details => {\n                this.ngZone.run(() => {\n                  onClientAuthorization(details);\n                });\n              });\n              return;\n            }\n          });\n        },\n        onError: error => {\n          this.ngZone.run(() => {\n            if (config.onError) {\n              config.onError(error);\n            }\n          });\n        },\n        onCancel: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onCancel) {\n              config.onCancel(data, actions);\n            }\n          });\n        },\n        onClick: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onClick) {\n              config.onClick(data, actions);\n            }\n          });\n        },\n        onInit: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onInit) {\n              config.onInit(data, actions);\n            }\n          });\n        },\n        // Add the functions if they've been created in the config object\n        // The API only allows one of the two to be set\n        ...((config.createOrderOnClient || config.createOrderOnServer) && {\n          createOrder\n        }),\n        ...(config.createSubscriptionOnClient && {\n          createSubscription\n        }),\n        // The onShippingChange callback cannot be used with subscriptions\n        // so we only add it if it is set\n        ...(config.onShippingChange && {\n          onShippingChange\n        })\n      };\n      paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n    });\n  }\n}\n/** @nocollapse */ /** @nocollapse */\nNgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n  return new (t || NgxPaypalComponent)(i0.ɵɵdirectiveInject(PayPalScriptService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */ /** @nocollapse */\nNgxPaypalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxPaypalComponent,\n  selectors: [[\"ngx-paypal\"]],\n  viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    }\n  },\n  inputs: {\n    config: \"config\",\n    registerScript: \"registerScript\"\n  },\n  outputs: {\n    scriptLoaded: \"scriptLoaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n  template: function NgxPaypalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPaypalComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'ngx-paypal',\n      template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n    }]\n  }], function () {\n    return [{\n      type: PayPalScriptService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    registerScript: [{\n      type: Input\n    }],\n    scriptLoaded: [{\n      type: Output\n    }],\n    payPalButtonContainer: [{\n      type: ViewChild,\n      args: ['payPalButtonContainer', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass NgxPayPalModule {}\n/** @nocollapse */ /** @nocollapse */\nNgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n  return new (t || NgxPayPalModule)();\n};\n/** @nocollapse */ /** @nocollapse */\nNgxPayPalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPayPalModule\n});\n/** @nocollapse */ /** @nocollapse */\nNgxPayPalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, PayPalScriptService],\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPayPalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxPaypalComponent],\n      exports: [NgxPaypalComponent],\n      providers: [ScriptService, PayPalScriptService]\n    }]\n  }], null, null);\n})();\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n//# sourceMappingURL=ngx-paypal.mjs.map","map":{"version":3,"names":["CommonModule","i0","Injectable","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","Subject","_c0","ScriptService","constructor","zone","registerScript","url","globalVar","onReady","existingGlobalVar","window","run","scriptElem","document","createElement","id","getElemId","innerHTML","onload","src","async","defer","getElementsByTagName","appendChild","cleanup","getElementById","remove","ɵfac","ScriptService_Factory","t","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","PayPalScriptService","scriptService","paypalWindowName","registerPayPalScript","config","getUrlForConfig","destroyPayPalScript","params","name","value","clientId","currency","push","commit","vault","intent","extraParams","getQueryString","queryParams","queryString","i","length","queryParam","PayPalScriptService_Factory","NgxPaypalComponent","paypalScriptService","cdr","ngZone","scriptLoaded","ngUnsubscribe","initializePayPal","payPalButtonContainer","content","payPalButtonContainerElem","ngOnChanges","changes","payPalButtonContainerId","generateElementId","isFirstChange","initPayPalScript","payPal","doPayPalCheck","reinitialize","ngOnDestroy","next","complete","ngAfterViewInit","customInit","undefined","nativeElement","firstChild","removeChild","detectChanges","initPayPal","advanced","extraQueryParams","paypal","Date","valueOf","runOutsideAngular","createOrder","data","actions","createOrderOnClient","createOrderOnServer","Error","order","create","createSubscription","createSubscriptionOnClient","subscription","onShippingChange","buttonsConfig","style","onApprove","authorizeOnServer","onClientAuthorization","capture","then","details","onError","error","onCancel","onClick","onInit","Buttons","render","NgxPaypalComponent_Factory","ɵɵdirectiveInject","ChangeDetectorRef","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","NgxPaypalComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","NgxPaypalComponent_Template","ɵɵelement","ɵɵproperty","encapsulation","changeDetection","args","OnPush","selector","static","NgxPayPalModule","NgxPayPalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","declarations","exports"],"sources":["D:/KhoaLuanTotNghiep2024/29_11_final/TechHalo/techhalo/node_modules/ngx-paypal/fesm2020/ngx-paypal.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n    }\r\n    registerScript(url, globalVar, onReady) {\r\n        const existingGlobalVar = window[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady(window[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    cleanup(globalVar) {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n    getElemId(globalVar) {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass PayPalScriptService {\r\n    constructor(scriptService) {\r\n        this.scriptService = scriptService;\r\n        this.paypalWindowName = 'paypal';\r\n    }\r\n    registerPayPalScript(config, onReady) {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n    destroyPayPalScript() {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n    getUrlForConfig(config) {\r\n        const params = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n        if (config.intent) {\r\n            params.push({\r\n                name: 'intent',\r\n                value: config.intent\r\n            });\r\n        }\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n    getQueryString(queryParams) {\r\n        let queryString = '';\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            }\r\n            else {\r\n                queryString += '&';\r\n            }\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n        return queryString;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ PayPalScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService, deps: [{ token: ScriptService }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ /** @nocollapse */ PayPalScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: PayPalScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: ScriptService }]; } });\n\nclass NgxPaypalComponent {\r\n    constructor(paypalScriptService, cdr, ngZone) {\r\n        this.paypalScriptService = paypalScriptService;\r\n        this.cdr = cdr;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n         * sharing base configuration. In such a case only a single component may register script.\r\n         */\r\n        this.registerScript = true;\r\n        /**\r\n         * Emitted when paypal script is loaded\r\n         */\r\n        this.scriptLoaded = new EventEmitter();\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n         */\r\n        this.initializePayPal = true;\r\n    }\r\n    set payPalButtonContainer(content) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n        // first time config setup\r\n        const config = this.config;\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.doPayPalCheck();\r\n    }\r\n    customInit(payPal) {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n    reinitialize(config) {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n        this.cdr.detectChanges();\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n            else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n    doPayPalCheck() {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n    initPayPalScript(config, initPayPal) {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            intent: config.intent,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n    generateElementId() {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n    initPayPal(config, paypal) {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            const createOrder = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                });\r\n            };\r\n            const createSubscription = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createSubscriptionOnClient) {\r\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\r\n                    }\r\n                });\r\n            };\r\n            const onShippingChange = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const buttonsConfig = {\r\n                style: config.style,\r\n                onApprove: (data, actions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((details) => {\r\n                                this.ngZone.run(() => {\r\n                                    onClientAuthorization(details);\r\n                                });\r\n                            });\r\n                            return;\r\n                        }\r\n                    });\r\n                },\r\n                onError: (error) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                },\r\n                onCancel: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onClick: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onInit: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                // Add the functions if they've been created in the config object\r\n                // The API only allows one of the two to be set\r\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\r\n                ...((config.createSubscriptionOnClient) && { createSubscription }),\r\n                // The onShippingChange callback cannot be used with subscriptions\r\n                // so we only add it if it is set\r\n                ...(config.onShippingChange && { onShippingChange })\r\n            };\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ /** @nocollapse */ NgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.3\", type: NgxPaypalComponent, selector: \"ngx-paypal\", inputs: { config: \"config\", registerScript: \"registerScript\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, viewQueries: [{ propertyName: \"payPalButtonContainer\", first: true, predicate: [\"payPalButtonContainer\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPaypalComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    selector: 'ngx-paypal',\r\n                    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], registerScript: [{\r\n                type: Input\r\n            }], scriptLoaded: [{\r\n                type: Output\r\n            }], payPalButtonContainer: [{\r\n                type: ViewChild,\r\n                args: ['payPalButtonContainer', { static: false }]\r\n            }] } });\n\nclass NgxPayPalModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, declarations: [NgxPaypalComponent], imports: [CommonModule], exports: [NgxPaypalComponent] });\r\n/** @nocollapse */ /** @nocollapse */ NgxPayPalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, providers: [\r\n        ScriptService,\r\n        PayPalScriptService\r\n    ], imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxPayPalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    exports: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        PayPalScriptService\r\n                    ]\r\n                }]\r\n        }] });\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n//# sourceMappingURL=ngx-paypal.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}