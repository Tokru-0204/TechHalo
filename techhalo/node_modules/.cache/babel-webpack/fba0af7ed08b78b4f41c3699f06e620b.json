{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'auth-token';\nconst ROLES_KEY = 'auth-roles';\nexport let SessionService = /*#__PURE__*/(() => {\n  class SessionService {\n    constructor() {}\n    signOut() {\n      window.sessionStorage.clear();\n    }\n    saveToken(token) {\n      window.sessionStorage.removeItem(TOKEN_KEY);\n      window.sessionStorage.setItem(TOKEN_KEY, token);\n    }\n    getToken() {\n      return sessionStorage.getItem(TOKEN_KEY);\n    }\n    getUser() {\n      try {\n        let email = jwt_decode(String(this.getToken()));\n        return email.sub;\n      } catch (Error) {\n        return null;\n      }\n    }\n    getUserId() {\n      const token = this.getToken();\n      if (token) {\n        try {\n          const decoded = jwt_decode(token); // Decode the JWT token\n          console.log(decoded); // Log the decoded token to inspect its contents\n          return decoded.userId; // Return the userId (assuming it's stored as 'userId' in the JWT token)\n        } catch (e) {\n          console.error(\"Error decoding token:\", e);\n          return null;\n        }\n      }\n      return null;\n    }\n    saveRoles(roles) {\n      sessionStorage.setItem(ROLES_KEY, JSON.stringify(roles));\n    }\n    getRoles() {\n      const roles = sessionStorage.getItem(ROLES_KEY);\n      return roles ? JSON.parse(roles) : [];\n    }\n    hasRole(role) {\n      return this.getRoles().includes(role);\n    }\n  }\n  SessionService.ɵfac = function SessionService_Factory(t) {\n    return new (t || SessionService)();\n  };\n  SessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SessionService,\n    factory: SessionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SessionService;\n})();","map":null,"metadata":{},"sourceType":"module"}