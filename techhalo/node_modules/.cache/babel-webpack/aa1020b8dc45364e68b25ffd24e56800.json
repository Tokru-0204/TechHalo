{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../../services_admin/category.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction EditCategoryComponent_Admin_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"h2\", 4);\n    i0.ɵɵtext(2, \"C\\u1EADp nh\\u1EADt th\\u00F4ng tin lo\\u1EA1i s\\u1EA3n ph\\u1EA9m\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"form\", 6);\n    i0.ɵɵelement(5, \"input\", 7);\n    i0.ɵɵelement(6, \"input\", 8);\n    i0.ɵɵelementStart(7, \"div\", 9);\n    i0.ɵɵelementStart(8, \"label\", 10);\n    i0.ɵɵtext(9, \"T\\u00EAn lo\\u1EA1i s\\u1EA3n ph\\u1EA9m:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 11);\n    i0.ɵɵelementStart(11, \"small\", 12);\n    i0.ɵɵtext(12, \"H\\u00E3y nh\\u1EADp \\u0111\\u00FAng t\\u00EAn nh\\u00E3n h\\u00E0ng\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function EditCategoryComponent_Admin_ng_template_0_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.update();\n    });\n    i0.ɵɵtext(14, \"C\\u1EADp nh\\u1EADt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.postForm);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ((tmp_1_0 = ctx_r1.postForm.get(\"categoryName\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx_r1.postForm.get(\"categoryName\")) == null ? null : tmp_1_0.invalid)));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.postForm == null ? null : ctx_r1.postForm.invalid);\n  }\n}\nexport let EditCategoryComponent_Admin = /*#__PURE__*/(() => {\n  class EditCategoryComponent_Admin {\n    constructor(modalService, categoryService, toastr) {\n      this.modalService = modalService;\n      this.categoryService = categoryService;\n      this.toastr = toastr;\n      this.id = 0; // ID danh mục để lấy thông tin\n      this.editFinish = new EventEmitter();\n      this.categories = []; // Danh sách các danh mục đã có\n      this.postForm = new FormGroup({\n        'categoryId': new FormControl(0),\n        'categoryName': new FormControl(null, [Validators.required, Validators.minLength(2)]),\n        'status': new FormControl(true)\n      });\n    }\n    ngOnInit() {\n      this.loadCategories(); // Tải danh sách danh mục khi khởi tạo component\n      this.getCategory(); // Lấy thông tin danh mục cần chỉnh sửa\n    }\n    // Gọi API để lấy danh mục hiện tại\n    getCategory() {\n      this.categoryService.getOne(this.id).subscribe(data => {\n        this.category = data;\n        // Cập nhật giá trị form với thông tin danh mục\n        this.postForm = new FormGroup({\n          'categoryId': new FormControl(this.category.categoryId),\n          'categoryName': new FormControl(this.category.categoryName, [Validators.required, Validators.minLength(2)]),\n          'status': new FormControl(this.category.status)\n        });\n      }, error => {\n        this.modalService.dismissAll();\n        this.toastr.error('Lỗi! Không tìm thấy danh mục', 'Hệ thống');\n      });\n    }\n    // Lấy danh sách tất cả các danh mục\n    loadCategories() {\n      this.categoryService.getAll().subscribe(data => {\n        this.categories = data; // Ép kiểu dữ liệu về Category[]\n      }, error => {\n        this.toastr.error('Lỗi khi tải danh mục!', 'Hệ thống');\n      });\n    }\n    // Kiểm tra xem tên danh mục đã tồn tại chưa\n    isCategoryNameExist(name) {\n      return this.categories.some(category => category.categoryName.toLowerCase() === name.toLowerCase() && category.categoryId !== this.id);\n    }\n    // Cập nhật danh mục\n    update() {\n      if (this.postForm.valid) {\n        const categoryName = this.postForm.value.categoryName;\n        // Kiểm tra xem tên danh mục đã tồn tại chưa\n        if (this.isCategoryNameExist(categoryName)) {\n          this.toastr.warning('Tên danh mục này đã tồn tại!', 'Thông báo');\n          return;\n        }\n        // Nếu không tồn tại, thực hiện cập nhật danh mục\n        this.categoryService.put(this.id, this.postForm.value).subscribe(data => {\n          this.modalService.dismissAll();\n          this.toastr.success('Cập nhật thành công!', 'Hệ thống');\n          this.editFinish.emit('done');\n        }, error => {\n          this.toastr.error('Cập nhật thất bại!', 'Hệ thống');\n        });\n      } else {\n        this.toastr.error('Thông tin không hợp lệ!', 'Hệ thống');\n      }\n    }\n    // Mở modal chỉnh sửa\n    open(content) {\n      this.modalService.open(content, {\n        centered: true\n      });\n    }\n  }\n  EditCategoryComponent_Admin.ɵfac = function EditCategoryComponent_Admin_Factory(t) {\n    return new (t || EditCategoryComponent_Admin)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n  EditCategoryComponent_Admin.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditCategoryComponent_Admin,\n    selectors: [[\"app-edit-category\"]],\n    inputs: {\n      id: \"id\"\n    },\n    outputs: {\n      editFinish: \"editFinish\"\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[\"content\", \"\"], [2, \"color\", \"steelblue\", \"cursor\", \"pointer\", 3, \"click\"], [1, \"fas\", \"fa-edit\"], [1, \"modal-header\"], [1, \"modal-title\", \"m-0\"], [1, \"modal-body\", \"p-4\"], [3, \"formGroup\"], [\"type\", \"hidden\", \"formControlName\", \"status\"], [\"type\", \"text\", \"id\", \"categoryid\", \"formControlName\", \"categoryId\", \"hidden\", \"\", 1, \"form-control\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"categoryName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"categoryName\", \"placeholder\", \"T\\u00EAn nh\\u00E3n h\\u00E0ng\", \"formControlName\", \"categoryName\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"]],\n    template: function EditCategoryComponent_Admin_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r6 = i0.ɵɵgetCurrentView();\n        i0.ɵɵtemplate(0, EditCategoryComponent_Admin_ng_template_0_Template, 15, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(2, \"a\", 1);\n        i0.ɵɵlistener(\"click\", function EditCategoryComponent_Admin_Template_a_click_2_listener() {\n          i0.ɵɵrestoreView(_r6);\n          const _r0 = i0.ɵɵreference(1);\n          return ctx.open(_r0);\n        });\n        i0.ɵɵelement(3, \"i\", 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i5.NgClass, i6.MatButton],\n    styles: [\"\"]\n  });\n  return EditCategoryComponent_Admin;\n})();","map":null,"metadata":{},"sourceType":"module"}